/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ignite.demo;

import com.ignite.demo.catalog.*;
import com.ignite.demo.user.User;
import com.ignite.demo.user.UserCacheKey;
import com.ignite.demo.user.UserService;
import org.apache.ignite.Ignite;
import org.apache.ignite.IgniteCache;
import org.apache.ignite.IgniteCompute;
import org.apache.ignite.Ignition;
import org.apache.ignite.cache.CacheMode;
import org.apache.ignite.cache.CacheRebalanceMode;
import org.apache.ignite.configuration.CacheConfiguration;
import org.apache.ignite.configuration.IgniteConfiguration;

import java.math.BigDecimal;
import java.util.List;

public class App {
    static CacheConfiguration userCacheConfiguration() {
        return new CacheConfiguration<>("user_cache")
                .setIndexedTypes(UserCacheKey.class, User.class)
                .setCacheMode(CacheMode.PARTITIONED);
    }

    static CacheConfiguration catalogCacheConfiguration() {
        return new CacheConfiguration<>("catalog_cache")
                .setIndexedTypes(CatalogCacheKey.class, Catalog.class)
                .setCacheMode(CacheMode.PARTITIONED);
    }

    static CacheConfiguration itemCacheConfiguration() {
        return new CacheConfiguration<>("item_cache")
                .setIndexedTypes(ItemCacheKey.class, Item.class)
                .setCacheMode(CacheMode.PARTITIONED)
                .setRebalanceMode(CacheRebalanceMode.SYNC);
    }
    public static void main(String[] args) {
        IgniteConfiguration igniteConfiguration = new IgniteConfiguration();
        CacheConfiguration userCacheConfiguration = userCacheConfiguration();
        CacheConfiguration catalogCacheConfiguration = catalogCacheConfiguration();
        CacheConfiguration itemCacheConfiguration = itemCacheConfiguration();
        igniteConfiguration.setCacheConfiguration(userCacheConfiguration, catalogCacheConfiguration, itemCacheConfiguration);

        Ignite ignite = Ignition.getOrStart(igniteConfiguration);

        UserService userService = UserService.fromCache(ignite, "user_cache");
        userService.create("Panuto");
        userService.create("Bruno");
        userService.create("Luis");
        List<User> users = userService.fetchAll();
        for(User user : users) {
            System.out.println("User: " + user);
        }

        CatalogService catalogService = CatalogService.fromCache(ignite, "catalog_cache");
        CatalogCacheKey catalogId = catalogService.create();

        ItemService itemService = ItemService.fromCache(ignite, "item_cache");
        itemService.createItemForCatalog(catalogId, "Item A", BigDecimal.valueOf(11));
        itemService.createItemForCatalog(catalogId, "Item B", BigDecimal.valueOf(22));
        itemService.createItemForCatalog(catalogId, "Item C", BigDecimal.valueOf(33));
        itemService.createItemForCatalog(catalogId, "Item D", BigDecimal.valueOf(44));

        List<Item> items = itemService.fetchAll(catalogId);
        for(Item item : items) {
            System.out.println("ITEM: " + item);
        }

        try {
            Thread.sleep(5000);
        } catch(InterruptedException ex) {

        }
        IgniteCompute compute = ignite.compute();
        IgniteCache<ItemCacheKey, Item> itemCache = ignite.cache("item_cache");
        BigDecimal sum = compute.execute(new SumItemPricesTask(itemCache), catalogId.getId());
        System.out.println("SUM: " + sum);
    }
}
